---
title: "MUSO GPS Report"
subtitle: "| Caris Foundation International | Impact Youth Project"
author: "Alexandro Disla  | M&E Officer"
jupyter: python3
---

<style>
body{
  text-align: justify
}
</style>


```{python}
#| label: module and frameworks for python

import pandas as pd
import numpy as np
from datetime import datetime 
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
import time
import os
from dotenv import load_dotenv
```

```{python}
#| label: commcare cnnection
#| include: false
#| eval: false

load_dotenv()
email = os.getenv('COMMCARE_USERNAME')
password_cc = os.getenv('COMMCARE_PASSWORD')

#Defining the driver
driver = webdriver.Chrome(ChromeDriverManager().install())
driver.implicitly_wait(1000)

#Creating login function
def commcare_login():
    driver.get(
        'https://www.commcarehq.org/a/caris-test/data/export/custom/new/case/download/c6bf8477aadc01e8034f62066beb0a6d/'
    )
    driver.find_element(By.XPATH,'//*[@id="id_auth-username"]').send_keys(email)
    driver.find_element(By.XPATH,'//*[@id="id_auth-password"]').send_keys(password_cc)
    driver.find_element(By.CSS_SELECTOR,'button[type=submit]').click()
       
commcare_login()

#Download the database "Muso_groupes_GPS"
driver.find_element(By.XPATH,'//*[@id="download-export-form"]/form/div[2]/div/div[2]/div[1]/button/span[1]').click()
driver.find_element(By.XPATH,'//*[@id="download-progress"]/div/div/div[2]/div[1]/form/a/span[1]').click()


```


```{python}
#| label: quicl the driver
#| eval: false

driver.quit()
```


```{python}
#| label: get the data

df_muso = pd.read_excel(f"~/Downloads/Muso_groupes _GPS {str(datetime.today().strftime('%Y-%m-%d'))}.xlsx")

df_muso.is_inactive.fillna(0,inplace=True)
df_muso.is_graduated.fillna(0,inplace=True)
df_muso.gps.fillna("---",inplace=True)


df_muso.query('is_graduated != "1" & is_inactive!="1" & closed != True',inplace=True)

df_muso = df_muso[["caseid","name","gps","gps_date","office","commune_name","office_name","officer_name","is_inactive"]]

df_muso["code_GPS"] = df_muso.gps.apply(
    lambda gps: "no" if (gps=="---" or gps=="") else "yes" 
)
yes = df_muso.query('code_GPS=="yes"')
```

### **Overview**

```{python}
from IPython.display import display, Markdown
display(
    Markdown(
        f"Sur {df_muso.shape[0]} groupes actifs de MUSO, {yes.shape[0]} ont déjà un code GPS soit {round((yes.shape[0]/df_muso.shape[0])*100,2)}%. Ci-après un petit tableau synoptique:"
    )
)
```

### **Tableau 1 - Statistiques globales**


```{python}
gps_table = pd.DataFrame(
    {
        "Indicateur":[
            "Groupes actifs de MUSO recensés à ce jour",
            "Groupes actifs de MUSO avec coordonnées GPS",
            "Groupes actifs de MUSO sans coordonnées GPS"
        ],
        "Total":[
            df_muso.shape[0],
            yes.shape[0],
            df_muso.shape[0] - yes.shape[0]
        ],
        "Proportion":[
            "100%",
            f"{round((yes.shape[0]/df_muso.shape[0])*100,1)}%",
            f"{round(100-(yes.shape[0]/df_muso.shape[0])*100,1)}%",
        ]
    }
)

style_table = gps_table.style

headers = {
    'selector': 'th.col_heading',
    'props': 'background-color: flatly; color: green;'
}

style_table.set_table_styles([ headers])

style_table.set_properties(
    ["Total"],
    **{'font-weight':'bold'}
)
style_table.set_properties(
    **{'border':'1.3px solid black'}
)
style_table.set_properties(
    ["Proportion"],
    **{'background':'black', 'color':'white', 'border':'1.3px solid white'}
)
style_table
```
